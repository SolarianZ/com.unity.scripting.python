{
  "name": "com.unity.scripting.python",
  "displayName": "Python for Unity",
  "version": "2.1.0-preview.1",
  "dependencies": {},
  "unity": "2019.3",
  "description": "An integration of Python for .NET delivered to your project through the Package Manager, Python for Unity provides your Unity project the means to import the Python Runtime Environment as a namespace and execute Python scripts from both inside the Unity editor and built applications.",
  "keywords": [
    "python",
    "python.net"
  ],
  "upmCi": {
    "footprint": "d2b333486073faaac2f5056656b97426240a6290"
  },
  "repository": {
    "url": "https://github.com/Unity-Technologies/com.unity.scripting.python.git",
    "type": "git",
    "revision": "836452e1964869208f13bb10d5a76a7dacc62e3b"
  },
  "samples": [
    {
      "displayName": "Eval-exec example",
      "description": "Example client showing how to control a client from within Unity. Send exec() commands to the client to make it run Python commands. Send eval() commands to get the results. You can use the client as a base class for your own clients.",
      "path": "Samples~/EvalExecExample"
    },
    {
      "displayName": "PySide Camera Selector",
      "description": "Demonstrates how to build a custom tool with a PySide UI with two-way interaction with Unity: it inspects the Unity scene to get the list of cameras, but also Unity tells the UI when cameras are added.",
      "path": "Samples~/PySideExample"
    },
    {
      "displayName": "REPL client example",
      "description": "This sample shows how to build a client that sends commands to Unity from outside. It implements a read-eval-print loop (REPL). If you type in commands like `x = UnityEngine.Application.dataPath` they will be evaluated within Unity. The keyword `log` prints to the Unity Console and demonstrates how to make an asynchronous call.",
      "path": "Samples~/ReplClientExample"
    }
  ]
}
